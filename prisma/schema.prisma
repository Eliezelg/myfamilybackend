// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  birthDate     DateTime?
  gender        String?
  location      String?
  bio           String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  families        Family[]       // Familles créées par l'utilisateur
  familyMembers   FamilyMember[] // Familles dont l'utilisateur est membre
  invitesCreated  FamilyInvite[] @relation("CreatedInvites")
  uploadedPhotos  Photo[]        // Photos uploadées par l'utilisateur
}

model Family {
  id            String    @id @default(uuid())
  name          String
  description   String?
  patriarchName String?
  matriarchName String?
  location      String?
  foundingDate  DateTime?
  userId        String    // Créateur de la famille
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  members       FamilyMember[]
  children      Child[]
  invites       FamilyInvite[]
  photos        Photo[]       // Photos de la famille
}

model FamilyMember {
  id            String    @id @default(uuid())
  familyId      String
  userId        String
  role          String    // admin, member
  relationship  String?   // père, mère, fils, fille, etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  family        Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Child {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  birthDate     DateTime?
  gender        String?
  familyId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  family        Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model FamilyInvite {
  id            String    @id @default(uuid())
  familyId      String
  createdById   String
  email         String
  relationship  String?
  code          String    @unique
  accepted      Boolean   @default(false)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  family        Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy     User      @relation("CreatedInvites", fields: [createdById], references: [id], onDelete: Cascade)
}

model Photo {
  id            String    @id @default(uuid())
  familyId      String
  uploadedById  String
  title         String?
  description   String?
  fileName      String
  fileSize      Int
  fileType      String
  width         Int
  height        Int
  url           String
  thumbnailUrl  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  family        Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  uploadedBy    User      @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}
